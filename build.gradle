plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
}

ext {
    excludedPackages = [
            '**/store/myproject/onlineshop/global/config',
            '**/store/myproject/onlineshop/global/aop',
            '**/store/myproject/onlineshop/global/db',
            '**/store/myproject/onlineshop/global/annotation',
            '**/store/myproject/onlineshop/global/init',
            '**/store/myproject/onlineshop/global/event',
            '**/store/myproject/onlineshop/exception/**',
            '**/store/myproject/onlineshop/domain/**',
            '**/OnlineshopApplication.class'     // 메인 클래스
    ]
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
    }
    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it,
                            excludes: [] + Qdomains + excludedPackages)
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'

}

jacocoTestCoverageVerification {

    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it,
                            excludes: [] + Qdomains + excludedPackages)
                })
        )
    }

    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
        }
    }
}

group = 'store.myproject'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.assertj:assertj-core"

    // H2 DB (테스트용)
    testImplementation 'com.h2database:h2'

    // Instancio
    testImplementation 'org.instancio:instancio-junit:3.0.0'

    // Faker
    testImplementation 'com.github.javafaker:javafaker:1.0.2'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Lombok for TestCode
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // MYSQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    //Querydsl 추가
    implementation "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Jwt
    implementation 'io.jsonwebtoken:jjwt-root:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // aop 사용
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '3.0.5'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '3.0.5'

    // 메일 발송
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // 포트원 REST API
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.23'

    // uuid v7
    implementation 'com.github.f4b6a3:uuid-creator:5.3.2'
}


def generatedDir = "src/main/generated"

sourceSets {
    main {
        java {
            srcDirs += [generatedDir]
        }
    }
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(generatedDir)
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

clean {
    delete file('src/main/generated')
}
